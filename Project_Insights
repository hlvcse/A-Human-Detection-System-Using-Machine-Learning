Using machine learning techniques to build a human detection system can be quite interesting and useful. 
The combination of Python, NumPy, OpenCV, and machine learning basics is a powerful toolkit for such tasks. 
Here's a general outline of how approach approach for this project:

1. **Data Collection**: Collect a diverse set of images and videos containing people. 
   This dataset will be used for training and testing your human detection system. 
   Ensure that the dataset includes various backgrounds, poses, and lighting conditions to make the model robust.

2. **Preprocessing**: Before training the model, preprocess the data to extract meaningful features.
   In this case, you can use the Histogram of Oriented Gradients (HOG) feature representation. 
   HOG captures the local gradient information from image patches, which is useful for detecting human-like shapes.

3. **Feature Extraction**: Implement the HOG feature extraction algorithm using OpenCV. 
   This will convert the input images into feature vectors that can be used for training the machine learning model.

4. **Training**: Split your dataset into training and testing sets. 
   Use the training set to train a Support Vector Machine (SVM) classifier. 
   SVMs are commonly used for object detection tasks. 
   Train the SVM using the extracted HOG features as input and the corresponding labels (person or non-person) as the target.

5. **Model Evaluation**: Evaluate the trained SVM classifier on the testing set to assess its performance. 
    Use metrics like accuracy, precision, recall, and F1 score to measure the effectiveness of the model.

6. **Integration and Real-time Detection**: Once you have a trained classifier, integrate it into a system 
   that can perform human detection on images, videos, or in real-time. Use OpenCV's video processing capabilities
   to process frames from a video source or a webcam feed. Apply the trained classifier to each frame to detect and localize humans.

7. **Post-processing and Visualization**: Apply post-processing techniques to filter out false positives and refine the detected bounding boxes. 
You can use methods like non-maximum suppression to suppress overlapping detections and improve accuracy. 
Finally, visualize the detected humans by drawing bounding boxes around them.

This is just a high-level overview, and there are many specific details and considerations to explore within each step. 
Additionally, you can further improve the system's performance by using advanced techniques like deep learning-based object detection models (e.g., Faster R-CNN, YOLO, or SSD) if needed.
